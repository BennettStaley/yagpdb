// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testCommandsChannelsCMDOverrides(t *testing.T) {
	t.Parallel()

	query := CommandsChannelsCMDOverrides(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testCommandsChannelsCMDOverridesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	commandsChannelsCMDOverride := &CommandsChannelsCMDOverride{}
	if err = randomize.Struct(seed, commandsChannelsCMDOverride, commandsChannelsCMDOverrideDBTypes, true, commandsChannelsCMDOverrideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommandsChannelsCMDOverride struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = commandsChannelsCMDOverride.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = commandsChannelsCMDOverride.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := CommandsChannelsCMDOverrides(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCommandsChannelsCMDOverridesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	commandsChannelsCMDOverride := &CommandsChannelsCMDOverride{}
	if err = randomize.Struct(seed, commandsChannelsCMDOverride, commandsChannelsCMDOverrideDBTypes, true, commandsChannelsCMDOverrideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommandsChannelsCMDOverride struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = commandsChannelsCMDOverride.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = CommandsChannelsCMDOverrides(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := CommandsChannelsCMDOverrides(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCommandsChannelsCMDOverridesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	commandsChannelsCMDOverride := &CommandsChannelsCMDOverride{}
	if err = randomize.Struct(seed, commandsChannelsCMDOverride, commandsChannelsCMDOverrideDBTypes, true, commandsChannelsCMDOverrideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommandsChannelsCMDOverride struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = commandsChannelsCMDOverride.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := CommandsChannelsCMDOverrideSlice{commandsChannelsCMDOverride}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := CommandsChannelsCMDOverrides(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testCommandsChannelsCMDOverridesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	commandsChannelsCMDOverride := &CommandsChannelsCMDOverride{}
	if err = randomize.Struct(seed, commandsChannelsCMDOverride, commandsChannelsCMDOverrideDBTypes, true, commandsChannelsCMDOverrideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommandsChannelsCMDOverride struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = commandsChannelsCMDOverride.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := CommandsChannelsCMDOverrideExists(tx, commandsChannelsCMDOverride.ID)
	if err != nil {
		t.Errorf("Unable to check if CommandsChannelsCMDOverride exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CommandsChannelsCMDOverrideExistsG to return true, but got false.")
	}
}
func testCommandsChannelsCMDOverridesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	commandsChannelsCMDOverride := &CommandsChannelsCMDOverride{}
	if err = randomize.Struct(seed, commandsChannelsCMDOverride, commandsChannelsCMDOverrideDBTypes, true, commandsChannelsCMDOverrideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommandsChannelsCMDOverride struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = commandsChannelsCMDOverride.Insert(tx); err != nil {
		t.Error(err)
	}

	commandsChannelsCMDOverrideFound, err := FindCommandsChannelsCMDOverride(tx, commandsChannelsCMDOverride.ID)
	if err != nil {
		t.Error(err)
	}

	if commandsChannelsCMDOverrideFound == nil {
		t.Error("want a record, got nil")
	}
}
func testCommandsChannelsCMDOverridesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	commandsChannelsCMDOverride := &CommandsChannelsCMDOverride{}
	if err = randomize.Struct(seed, commandsChannelsCMDOverride, commandsChannelsCMDOverrideDBTypes, true, commandsChannelsCMDOverrideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommandsChannelsCMDOverride struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = commandsChannelsCMDOverride.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = CommandsChannelsCMDOverrides(tx).Bind(commandsChannelsCMDOverride); err != nil {
		t.Error(err)
	}
}

func testCommandsChannelsCMDOverridesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	commandsChannelsCMDOverride := &CommandsChannelsCMDOverride{}
	if err = randomize.Struct(seed, commandsChannelsCMDOverride, commandsChannelsCMDOverrideDBTypes, true, commandsChannelsCMDOverrideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommandsChannelsCMDOverride struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = commandsChannelsCMDOverride.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := CommandsChannelsCMDOverrides(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCommandsChannelsCMDOverridesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	commandsChannelsCMDOverrideOne := &CommandsChannelsCMDOverride{}
	commandsChannelsCMDOverrideTwo := &CommandsChannelsCMDOverride{}
	if err = randomize.Struct(seed, commandsChannelsCMDOverrideOne, commandsChannelsCMDOverrideDBTypes, false, commandsChannelsCMDOverrideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommandsChannelsCMDOverride struct: %s", err)
	}
	if err = randomize.Struct(seed, commandsChannelsCMDOverrideTwo, commandsChannelsCMDOverrideDBTypes, false, commandsChannelsCMDOverrideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommandsChannelsCMDOverride struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = commandsChannelsCMDOverrideOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = commandsChannelsCMDOverrideTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := CommandsChannelsCMDOverrides(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCommandsChannelsCMDOverridesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	commandsChannelsCMDOverrideOne := &CommandsChannelsCMDOverride{}
	commandsChannelsCMDOverrideTwo := &CommandsChannelsCMDOverride{}
	if err = randomize.Struct(seed, commandsChannelsCMDOverrideOne, commandsChannelsCMDOverrideDBTypes, false, commandsChannelsCMDOverrideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommandsChannelsCMDOverride struct: %s", err)
	}
	if err = randomize.Struct(seed, commandsChannelsCMDOverrideTwo, commandsChannelsCMDOverrideDBTypes, false, commandsChannelsCMDOverrideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommandsChannelsCMDOverride struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = commandsChannelsCMDOverrideOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = commandsChannelsCMDOverrideTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := CommandsChannelsCMDOverrides(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testCommandsChannelsCMDOverridesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	commandsChannelsCMDOverride := &CommandsChannelsCMDOverride{}
	if err = randomize.Struct(seed, commandsChannelsCMDOverride, commandsChannelsCMDOverrideDBTypes, true, commandsChannelsCMDOverrideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommandsChannelsCMDOverride struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = commandsChannelsCMDOverride.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := CommandsChannelsCMDOverrides(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCommandsChannelsCMDOverridesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	commandsChannelsCMDOverride := &CommandsChannelsCMDOverride{}
	if err = randomize.Struct(seed, commandsChannelsCMDOverride, commandsChannelsCMDOverrideDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CommandsChannelsCMDOverride struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = commandsChannelsCMDOverride.Insert(tx, commandsChannelsCMDOverrideColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := CommandsChannelsCMDOverrides(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCommandsChannelsCMDOverrideToOneCommandsChannelsOverrideUsingChannelsOverride(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local CommandsChannelsCMDOverride
	var foreign CommandsChannelsOverride

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, commandsChannelsCMDOverrideDBTypes, false, commandsChannelsCMDOverrideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommandsChannelsCMDOverride struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, commandsChannelsOverrideDBTypes, false, commandsChannelsOverrideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommandsChannelsOverride struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.ChannelsOverridesID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.ChannelsOverride(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CommandsChannelsCMDOverrideSlice{&local}
	if err = local.L.LoadChannelsOverride(tx, false, (*[]*CommandsChannelsCMDOverride)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.ChannelsOverride == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ChannelsOverride = nil
	if err = local.L.LoadChannelsOverride(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.ChannelsOverride == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCommandsChannelsCMDOverrideToOneSetOpCommandsChannelsOverrideUsingChannelsOverride(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a CommandsChannelsCMDOverride
	var b, c CommandsChannelsOverride

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, commandsChannelsCMDOverrideDBTypes, false, strmangle.SetComplement(commandsChannelsCMDOverridePrimaryKeyColumns, commandsChannelsCMDOverrideColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, commandsChannelsOverrideDBTypes, false, strmangle.SetComplement(commandsChannelsOverridePrimaryKeyColumns, commandsChannelsOverrideColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, commandsChannelsOverrideDBTypes, false, strmangle.SetComplement(commandsChannelsOverridePrimaryKeyColumns, commandsChannelsOverrideColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*CommandsChannelsOverride{&b, &c} {
		err = a.SetChannelsOverride(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ChannelsOverride != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ChannelsOverrideCommandsChannelsCMDOverrides[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ChannelsOverridesID != x.ID {
			t.Error("foreign key was wrong value", a.ChannelsOverridesID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ChannelsOverridesID))
		reflect.Indirect(reflect.ValueOf(&a.ChannelsOverridesID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ChannelsOverridesID != x.ID {
			t.Error("foreign key was wrong value", a.ChannelsOverridesID, x.ID)
		}
	}
}
func testCommandsChannelsCMDOverridesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	commandsChannelsCMDOverride := &CommandsChannelsCMDOverride{}
	if err = randomize.Struct(seed, commandsChannelsCMDOverride, commandsChannelsCMDOverrideDBTypes, true, commandsChannelsCMDOverrideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommandsChannelsCMDOverride struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = commandsChannelsCMDOverride.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = commandsChannelsCMDOverride.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testCommandsChannelsCMDOverridesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	commandsChannelsCMDOverride := &CommandsChannelsCMDOverride{}
	if err = randomize.Struct(seed, commandsChannelsCMDOverride, commandsChannelsCMDOverrideDBTypes, true, commandsChannelsCMDOverrideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommandsChannelsCMDOverride struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = commandsChannelsCMDOverride.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := CommandsChannelsCMDOverrideSlice{commandsChannelsCMDOverride}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testCommandsChannelsCMDOverridesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	commandsChannelsCMDOverride := &CommandsChannelsCMDOverride{}
	if err = randomize.Struct(seed, commandsChannelsCMDOverride, commandsChannelsCMDOverrideDBTypes, true, commandsChannelsCMDOverrideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommandsChannelsCMDOverride struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = commandsChannelsCMDOverride.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := CommandsChannelsCMDOverrides(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	commandsChannelsCMDOverrideDBTypes = map[string]string{`AutoDelete`: `boolean`, `ChannelsOverridesID`: `bigint`, `Enabled`: `boolean`, `ID`: `bigint`, `RequiredRoles`: `ARRAYbigint`}
	_                                  = bytes.MinRead
)

func testCommandsChannelsCMDOverridesUpdate(t *testing.T) {
	t.Parallel()

	if len(commandsChannelsCMDOverrideColumns) == len(commandsChannelsCMDOverridePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	commandsChannelsCMDOverride := &CommandsChannelsCMDOverride{}
	if err = randomize.Struct(seed, commandsChannelsCMDOverride, commandsChannelsCMDOverrideDBTypes, true, commandsChannelsCMDOverrideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommandsChannelsCMDOverride struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = commandsChannelsCMDOverride.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := CommandsChannelsCMDOverrides(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, commandsChannelsCMDOverride, commandsChannelsCMDOverrideDBTypes, true, commandsChannelsCMDOverrideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommandsChannelsCMDOverride struct: %s", err)
	}

	if err = commandsChannelsCMDOverride.Update(tx); err != nil {
		t.Error(err)
	}
}

func testCommandsChannelsCMDOverridesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(commandsChannelsCMDOverrideColumns) == len(commandsChannelsCMDOverridePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	commandsChannelsCMDOverride := &CommandsChannelsCMDOverride{}
	if err = randomize.Struct(seed, commandsChannelsCMDOverride, commandsChannelsCMDOverrideDBTypes, true, commandsChannelsCMDOverrideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommandsChannelsCMDOverride struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = commandsChannelsCMDOverride.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := CommandsChannelsCMDOverrides(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, commandsChannelsCMDOverride, commandsChannelsCMDOverrideDBTypes, true, commandsChannelsCMDOverridePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CommandsChannelsCMDOverride struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(commandsChannelsCMDOverrideColumns, commandsChannelsCMDOverridePrimaryKeyColumns) {
		fields = commandsChannelsCMDOverrideColumns
	} else {
		fields = strmangle.SetComplement(
			commandsChannelsCMDOverrideColumns,
			commandsChannelsCMDOverridePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(commandsChannelsCMDOverride))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := CommandsChannelsCMDOverrideSlice{commandsChannelsCMDOverride}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testCommandsChannelsCMDOverridesUpsert(t *testing.T) {
	t.Parallel()

	if len(commandsChannelsCMDOverrideColumns) == len(commandsChannelsCMDOverridePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	commandsChannelsCMDOverride := CommandsChannelsCMDOverride{}
	if err = randomize.Struct(seed, &commandsChannelsCMDOverride, commandsChannelsCMDOverrideDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CommandsChannelsCMDOverride struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = commandsChannelsCMDOverride.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert CommandsChannelsCMDOverride: %s", err)
	}

	count, err := CommandsChannelsCMDOverrides(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &commandsChannelsCMDOverride, commandsChannelsCMDOverrideDBTypes, false, commandsChannelsCMDOverridePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CommandsChannelsCMDOverride struct: %s", err)
	}

	if err = commandsChannelsCMDOverride.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert CommandsChannelsCMDOverride: %s", err)
	}

	count, err = CommandsChannelsCMDOverrides(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
