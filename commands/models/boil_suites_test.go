// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("CommandsChannelsCMDOverrides", testCommandsChannelsCMDOverrides)
	t.Run("CommandsChannelsOverrides", testCommandsChannelsOverrides)
}

func TestDelete(t *testing.T) {
	t.Run("CommandsChannelsCMDOverrides", testCommandsChannelsCMDOverridesDelete)
	t.Run("CommandsChannelsOverrides", testCommandsChannelsOverridesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("CommandsChannelsCMDOverrides", testCommandsChannelsCMDOverridesQueryDeleteAll)
	t.Run("CommandsChannelsOverrides", testCommandsChannelsOverridesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("CommandsChannelsCMDOverrides", testCommandsChannelsCMDOverridesSliceDeleteAll)
	t.Run("CommandsChannelsOverrides", testCommandsChannelsOverridesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("CommandsChannelsCMDOverrides", testCommandsChannelsCMDOverridesExists)
	t.Run("CommandsChannelsOverrides", testCommandsChannelsOverridesExists)
}

func TestFind(t *testing.T) {
	t.Run("CommandsChannelsCMDOverrides", testCommandsChannelsCMDOverridesFind)
	t.Run("CommandsChannelsOverrides", testCommandsChannelsOverridesFind)
}

func TestBind(t *testing.T) {
	t.Run("CommandsChannelsCMDOverrides", testCommandsChannelsCMDOverridesBind)
	t.Run("CommandsChannelsOverrides", testCommandsChannelsOverridesBind)
}

func TestOne(t *testing.T) {
	t.Run("CommandsChannelsCMDOverrides", testCommandsChannelsCMDOverridesOne)
	t.Run("CommandsChannelsOverrides", testCommandsChannelsOverridesOne)
}

func TestAll(t *testing.T) {
	t.Run("CommandsChannelsCMDOverrides", testCommandsChannelsCMDOverridesAll)
	t.Run("CommandsChannelsOverrides", testCommandsChannelsOverridesAll)
}

func TestCount(t *testing.T) {
	t.Run("CommandsChannelsCMDOverrides", testCommandsChannelsCMDOverridesCount)
	t.Run("CommandsChannelsOverrides", testCommandsChannelsOverridesCount)
}

func TestInsert(t *testing.T) {
	t.Run("CommandsChannelsCMDOverrides", testCommandsChannelsCMDOverridesInsert)
	t.Run("CommandsChannelsCMDOverrides", testCommandsChannelsCMDOverridesInsertWhitelist)
	t.Run("CommandsChannelsOverrides", testCommandsChannelsOverridesInsert)
	t.Run("CommandsChannelsOverrides", testCommandsChannelsOverridesInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("CommandsChannelsCMDOverrideToCommandsChannelsOverrideUsingChannelsOverride", testCommandsChannelsCMDOverrideToOneCommandsChannelsOverrideUsingChannelsOverride)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("CommandsChannelsOverrideToChannelsOverrideCommandsChannelsCMDOverrides", testCommandsChannelsOverrideToManyChannelsOverrideCommandsChannelsCMDOverrides)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("CommandsChannelsCMDOverrideToCommandsChannelsOverrideUsingChannelsOverride", testCommandsChannelsCMDOverrideToOneSetOpCommandsChannelsOverrideUsingChannelsOverride)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("CommandsChannelsOverrideToChannelsOverrideCommandsChannelsCMDOverrides", testCommandsChannelsOverrideToManyAddOpChannelsOverrideCommandsChannelsCMDOverrides)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("CommandsChannelsCMDOverrides", testCommandsChannelsCMDOverridesReload)
	t.Run("CommandsChannelsOverrides", testCommandsChannelsOverridesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("CommandsChannelsCMDOverrides", testCommandsChannelsCMDOverridesReloadAll)
	t.Run("CommandsChannelsOverrides", testCommandsChannelsOverridesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("CommandsChannelsCMDOverrides", testCommandsChannelsCMDOverridesSelect)
	t.Run("CommandsChannelsOverrides", testCommandsChannelsOverridesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("CommandsChannelsCMDOverrides", testCommandsChannelsCMDOverridesUpdate)
	t.Run("CommandsChannelsOverrides", testCommandsChannelsOverridesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("CommandsChannelsCMDOverrides", testCommandsChannelsCMDOverridesSliceUpdateAll)
	t.Run("CommandsChannelsOverrides", testCommandsChannelsOverridesSliceUpdateAll)
}

func TestUpsert(t *testing.T) {
	t.Run("CommandsChannelsCMDOverrides", testCommandsChannelsCMDOverridesUpsert)
	t.Run("CommandsChannelsOverrides", testCommandsChannelsOverridesUpsert)
}
