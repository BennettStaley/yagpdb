// Code generated by "esc -o assets_gen.go -pkg commands -ignore .go assets/"; DO NOT EDIT.

package commands

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/assets/commands.html": {
		local:   "assets/commands.html",
		size:    10828,
		modtime: 1519513151,
		compressed: `
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
`,
	},

	"/assets/help-page.md": {
		local:   "assets/help-page.md",
		size:    4653,
		modtime: 1519494558,
		compressed: `
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
`,
	},

	"/assets/schema.sql": {
		local:   "assets/schema.sql",
		size:    856,
		modtime: 1519517135,
		compressed: `
H4sIAAAAAAAC/5SR0W6qQBCGr9mn2EtNfAOvPKfbhNRiozTRNM1kYaY4ybIbd7Xt4zcopKBg6C3/z8zs
9/1fq0WqZLr4t1QyfpTJKpVqG2/SjcxdWWqLAfK9tpZMAPdJ3jNSkBMRMcqMi0CetZEv6/h5sd7JJ7Wb
iag4sUG4FNgez0OT1+VyJqJ6FjCGOn17b+ccoDAu00ZmzplWIqJmO5DVmSG8bkT7KsxLBORwbkAZits5
ng7gnSGw9FXV+w+pZ7RKV9v06eiQDB2HOmI6F6LmGycPajueLxSM33KV3OtMGsqtNeM0VojGquy57der
pw/yZHMKdw9lnHYEDPmriMIF6U3m6XBiT3g212Ps77A7FJrPnWcOGOj8OOkFNJ3/BAAA//8O2XY/WAMA
AA==
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/assets": {
		isDir: true,
		local: "assets",
	},
}
