// Code generated by "esc -o assets_gen.go -pkg serverstats -ignore .go assets/"; DO NOT EDIT.

package serverstats

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/assets/schema.sql": {
		local:   "assets/schema.sql",
		size:    376,
		modtime: 1527169000,
		compressed: `
H4sIAAAAAAAC/3yPwUrDQBCGzztPMccW8gY9RV0hGKOkEdrTsrpDHUh3y86siE8vNalFqL1+fPwz321v
68HiUN+0Fpt77J4GtJtmPaxRKH9QdqJexR0ocwqCCzAc8JV3Qpn9+ON3L22Lz33zWPdbfLDbCgwYUZ+V
AqLynkT9/qBfFZhQsldO8TjBUSsAsys8BscB8ReaIpQndGZv7z5GGt10f2apRMWzBssVwNzUdHd2c7Hp
T5I73f/EFC9GL07GcnV1eyp2/+/MxvHH7wAAAP//TnSGKXgBAAA=
`,
	},

	"/assets/serverstats.html": {
		local:   "assets/serverstats.html",
		size:    6287,
		modtime: 1527188499,
		compressed: `
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
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/assets": {
		isDir: true,
		local: "assets",
	},
}
