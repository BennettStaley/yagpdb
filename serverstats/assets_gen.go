// Code generated by "esc -o assets_gen.go -pkg serverstats -ignore .go assets/"; DO NOT EDIT.

package serverstats

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/assets/schema.sql": {
		local:   "assets/schema.sql",
		size:    376,
		modtime: 1526218819,
		compressed: `
H4sIAAAAAAAC/3yPwUrDQBCGzztPMccW8gY9RV0hGKOkEdrTsrpDHUh3y86siE8vNalFqL1+fPwz321v
68HiUN+0Fpt77J4GtJtmPaxRKH9QdqJexR0ocwqCCzAc8JV3Qpn9+ON3L22Lz33zWPdbfLDbCgwYUZ+V
AqLynkT9/qBfFZhQsldO8TjBUSsAsys8BscB8ReaIpQndGZv7z5GGt10f2apRMWzBssVwNzUdHd2c7Hp
T5I73f/EFC9GL07GcnV1eyp2/+/MxvHH7wAAAP//TnSGKXgBAAA=
`,
	},

	"/assets/serverstats.html": {
		local:   "assets/serverstats.html",
		size:    6319,
		modtime: 1527099397,
		compressed: `
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
Rq8YAAA=
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/assets": {
		isDir: true,
		local: "assets",
	},
}
